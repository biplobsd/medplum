/*
 * Generated by @medplum/generator
 * Do not edit manually.
 */

import { Attachment } from './Attachment';
import { CodeableConcept } from './CodeableConcept';
import { DeviceDefinition } from './DeviceDefinition';
import { Duration } from './Duration';
import { Extension } from './Extension';
import { Identifier } from './Identifier';
import { ManufacturedItemDefinition } from './ManufacturedItemDefinition';
import { MedicinalProductDefinition } from './MedicinalProductDefinition';
import { Meta } from './Meta';
import { Narrative } from './Narrative';
import { Quantity } from './Quantity';
import { Ratio } from './Ratio';
import { Reference } from './Reference';
import { Resource } from './Resource';

/**
 * A medicinal product in the final form which is suitable for
 * administering to a patient (after any mixing of multiple components,
 * dissolution etc. has been performed).
 */
export interface AdministrableProductDefinition {

  /**
   * This is a AdministrableProductDefinition resource
   */
  readonly resourceType: 'AdministrableProductDefinition';

  /**
   * The logical id of the resource, as used in the URL for the resource.
   * Once assigned, this value never changes.
   */
  id?: string;

  /**
   * The metadata about the resource. This is content that is maintained by
   * the infrastructure. Changes to the content might not always be
   * associated with version changes to the resource.
   */
  meta?: Meta;

  /**
   * A reference to a set of rules that were followed when the resource was
   * constructed, and which must be understood when processing the content.
   * Often, this is a reference to an implementation guide that defines the
   * special rules along with other profiles etc.
   */
  implicitRules?: string;

  /**
   * The base language in which the resource is written.
   */
  language?: string;

  /**
   * A human-readable narrative that contains a summary of the resource and
   * can be used to represent the content of the resource to a human. The
   * narrative need not encode all the structured data, but is required to
   * contain sufficient detail to make it &quot;clinically safe&quot; for a human to
   * just read the narrative. Resource definitions may define what content
   * should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative;

  /**
   * These resources do not have an independent existence apart from the
   * resource that contains them - they cannot be identified independently,
   * and nor can they have their own independent transaction scope.
   */
  contained?: Resource[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the resource. To make the use of extensions
   * safe and manageable, there is a strict set of governance  applied to
   * the definition and use of extensions. Though any implementer can
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension.
   */
  extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the resource and that modifies the
   * understanding of the element that contains it and/or the understanding
   * of the containing element's descendants. Usually modifier elements
   * provide negation or qualification. To make the use of extensions safe
   * and manageable, there is a strict set of governance applied to the
   * definition and use of extensions. Though any implementer is allowed to
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension. Applications processing a
   * resource are required to check for modifier extensions.
   *
   * Modifier extensions SHALL NOT change the meaning of any elements on
   * Resource or DomainResource (including cannot change the meaning of
   * modifierExtension itself).
   */
  modifierExtension?: Extension[];

  /**
   * An identifier for the administrable product.
   */
  identifier?: Identifier[];

  /**
   * The status of this administrable product. Enables tracking the
   * life-cycle of the content.
   */
  status?: 'draft' | 'active' | 'retired' | 'unknown';

  /**
   * References a product from which one or more of the constituent parts
   * of that product can be prepared and used as described by this
   * administrable product.  If this administrable product describes the
   * administration of a crushed tablet, the 'formOf' would be the product
   * representing a distribution containing tablets and possibly also a
   * cream.  This is distinct from the 'producedFrom' which refers to the
   * specific components of the product that are used in this preparation,
   * rather than the product as a whole.
   */
  formOf?: Reference<MedicinalProductDefinition>[];

  /**
   * The dose form of the final product after necessary reconstitution or
   * processing. Contrasts to the manufactured dose form (see
   * ManufacturedItemDefinition). If the manufactured form was 'powder for
   * solution for injection', the administrable dose form could be
   * 'solution for injection' (once mixed with another item having
   * manufactured form 'solvent for solution for injection').
   */
  administrableDoseForm?: CodeableConcept;

  /**
   * The presentation type in which this item is given to a patient. e.g.
   * for a spray - 'puff' (as in 'contains 100 mcg per puff'), or for a
   * liquid - 'vial' (as in 'contains 5 ml per vial').
   */
  unitOfPresentation?: CodeableConcept;

  /**
   * Indicates the specific manufactured items that are part of the
   * 'formOf' product that are used in the preparation of this specific
   * administrable form.  In some cases, an administrable form might use
   * all of the items from the overall product (or there might only be one
   * item), while in other cases, an administrable form might use only a
   * subset of the items available in the overall product.  For example, an
   * administrable form might involve combining a liquid and a powder
   * available as part of an overall product, but not involve applying the
   * also supplied cream.
   */
  producedFrom?: Reference<ManufacturedItemDefinition>[];

  /**
   * The ingredients of this administrable medicinal product. This is only
   * needed if the ingredients are not specified either using
   * ManufacturedItemDefiniton (via
   * AdministrableProductDefinition.producedFrom) to state which component
   * items are used to make this, or using by incoming references from the
   * Ingredient resource, to state in detail which substances exist within
   * this. This element allows a basic coded ingredient to be used.
   */
  ingredient?: CodeableConcept[];

  /**
   * A device that is integral to the medicinal product, in effect being
   * considered as an &quot;ingredient&quot; of the medicinal product. This is not
   * intended for devices that are just co-packaged.
   */
  device?: Reference<DeviceDefinition>;

  /**
   * Characteristics e.g. a product's onset of action.
   */
  property?: AdministrableProductDefinitionProperty[];

  /**
   * The path by which the product is taken into or makes contact with the
   * body. In some regions this is referred to as the licenced or approved
   * route. RouteOfAdministration cannot be used when the 'formOf' product
   * already uses MedicinalProductDefinition.route (and vice versa).
   */
  routeOfAdministration?: AdministrableProductDefinitionRouteOfAdministration[];
}

/**
 * Characteristics e.g. a product's onset of action.
 */
export interface AdministrableProductDefinitionProperty {

  /**
   * Unique id for the element within a resource (for internal references).
   * This may be any string value that does not contain spaces.
   */
  id?: string;

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element. To make the use of extensions
   * safe and manageable, there is a strict set of governance  applied to
   * the definition and use of extensions. Though any implementer can
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension.
   */
  extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element and that modifies the
   * understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually
   * modifier elements provide negation or qualification. To make the use
   * of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any
   * implementer can define an extension, there is a set of requirements
   * that SHALL be met as part of the definition of the extension.
   * Applications processing a resource are required to check for modifier
   * extensions.
   *
   * Modifier extensions SHALL NOT change the meaning of any elements on
   * Resource or DomainResource (including cannot change the meaning of
   * modifierExtension itself).
   */
  modifierExtension?: Extension[];

  /**
   * A code expressing the type of characteristic.
   */
  type?: CodeableConcept;

  /**
   * A value for the characteristic.
   */
  valueCodeableConcept?: CodeableConcept;

  /**
   * A value for the characteristic.
   */
  valueQuantity?: Quantity;

  /**
   * A value for the characteristic.
   */
  valueDate?: string;

  /**
   * A value for the characteristic.
   */
  valueBoolean?: boolean;

  /**
   * A value for the characteristic.
   */
  valueAttachment?: Attachment;

  /**
   * The status of characteristic e.g. assigned or pending.
   */
  status?: CodeableConcept;
}

/**
 * The path by which the product is taken into or makes contact with the
 * body. In some regions this is referred to as the licenced or approved
 * route. RouteOfAdministration cannot be used when the 'formOf' product
 * already uses MedicinalProductDefinition.route (and vice versa).
 */
export interface AdministrableProductDefinitionRouteOfAdministration {

  /**
   * Unique id for the element within a resource (for internal references).
   * This may be any string value that does not contain spaces.
   */
  id?: string;

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element. To make the use of extensions
   * safe and manageable, there is a strict set of governance  applied to
   * the definition and use of extensions. Though any implementer can
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension.
   */
  extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element and that modifies the
   * understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually
   * modifier elements provide negation or qualification. To make the use
   * of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any
   * implementer can define an extension, there is a set of requirements
   * that SHALL be met as part of the definition of the extension.
   * Applications processing a resource are required to check for modifier
   * extensions.
   *
   * Modifier extensions SHALL NOT change the meaning of any elements on
   * Resource or DomainResource (including cannot change the meaning of
   * modifierExtension itself).
   */
  modifierExtension?: Extension[];

  /**
   * Coded expression for the route.
   */
  code?: CodeableConcept;

  /**
   * The first dose (dose quantity) administered can be specified for the
   * product, using a numerical value and its unit of measurement.
   */
  firstDose?: Quantity;

  /**
   * The maximum single dose that can be administered, specified using a
   * numerical value and its unit of measurement.
   */
  maxSingleDose?: Quantity;

  /**
   * The maximum dose per day (maximum dose quantity to be administered in
   * any one 24-h period) that can be administered.
   */
  maxDosePerDay?: Quantity;

  /**
   * The maximum dose per treatment period that can be administered.
   */
  maxDosePerTreatmentPeriod?: Ratio;

  /**
   * The maximum treatment period during which the product can be
   * administered.
   */
  maxTreatmentPeriod?: Duration;

  /**
   * A species for which this route applies.
   */
  targetSpecies?: AdministrableProductDefinitionRouteOfAdministrationTargetSpecies[];
}

/**
 * A species for which this route applies.
 */
export interface AdministrableProductDefinitionRouteOfAdministrationTargetSpecies {

  /**
   * Unique id for the element within a resource (for internal references).
   * This may be any string value that does not contain spaces.
   */
  id?: string;

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element. To make the use of extensions
   * safe and manageable, there is a strict set of governance  applied to
   * the definition and use of extensions. Though any implementer can
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension.
   */
  extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element and that modifies the
   * understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually
   * modifier elements provide negation or qualification. To make the use
   * of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any
   * implementer can define an extension, there is a set of requirements
   * that SHALL be met as part of the definition of the extension.
   * Applications processing a resource are required to check for modifier
   * extensions.
   *
   * Modifier extensions SHALL NOT change the meaning of any elements on
   * Resource or DomainResource (including cannot change the meaning of
   * modifierExtension itself).
   */
  modifierExtension?: Extension[];

  /**
   * Coded expression for the species.
   */
  code?: CodeableConcept;

  /**
   * A species specific time during which consumption of animal product is
   * not appropriate.
   */
  withdrawalPeriod?: AdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod[];
}

/**
 * A species specific time during which consumption of animal product is
 * not appropriate.
 */
export interface AdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod {

  /**
   * Unique id for the element within a resource (for internal references).
   * This may be any string value that does not contain spaces.
   */
  id?: string;

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element. To make the use of extensions
   * safe and manageable, there is a strict set of governance  applied to
   * the definition and use of extensions. Though any implementer can
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension.
   */
  extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element and that modifies the
   * understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually
   * modifier elements provide negation or qualification. To make the use
   * of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any
   * implementer can define an extension, there is a set of requirements
   * that SHALL be met as part of the definition of the extension.
   * Applications processing a resource are required to check for modifier
   * extensions.
   *
   * Modifier extensions SHALL NOT change the meaning of any elements on
   * Resource or DomainResource (including cannot change the meaning of
   * modifierExtension itself).
   */
  modifierExtension?: Extension[];

  /**
   * Coded expression for the type of tissue for which the withdrawal
   * period applies, e.g. meat, milk.
   */
  tissue?: CodeableConcept;

  /**
   * A value for the time.
   */
  value?: Quantity;

  /**
   * Extra information about the withdrawal period.
   */
  supportingInformation?: string;
}
