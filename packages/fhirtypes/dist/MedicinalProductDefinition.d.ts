/*
 * Generated by @medplum/generator
 * Do not edit manually.
 */

import { Attachment } from './Attachment';
import { CodeableConcept } from './CodeableConcept';
import { CodeableReference } from './CodeableReference';
import { Coding } from './Coding';
import { DocumentReference } from './DocumentReference';
import { Extension } from './Extension';
import { Identifier } from './Identifier';
import { MarketingStatus } from './MarketingStatus';
import { Meta } from './Meta';
import { Narrative } from './Narrative';
import { Organization } from './Organization';
import { Period } from './Period';
import { PractitionerRole } from './PractitionerRole';
import { Quantity } from './Quantity';
import { Reference } from './Reference';
import { ResearchStudy } from './ResearchStudy';
import { Resource } from './Resource';

/**
 * A medicinal product, being a substance or combination of substances
 * that is intended to treat, prevent or diagnose a disease, or to
 * restore, correct or modify physiological functions by exerting a
 * pharmacological, immunological or metabolic action. This resource is
 * intended to define and detail such products and their properties, for
 * uses other than direct patient care (e.g. regulatory use, or drug
 * catalogs).
 */
export interface MedicinalProductDefinition {

  /**
   * This is a MedicinalProductDefinition resource
   */
  readonly resourceType: 'MedicinalProductDefinition';

  /**
   * The logical id of the resource, as used in the URL for the resource.
   * Once assigned, this value never changes.
   */
  id?: string;

  /**
   * The metadata about the resource. This is content that is maintained by
   * the infrastructure. Changes to the content might not always be
   * associated with version changes to the resource.
   */
  meta?: Meta;

  /**
   * A reference to a set of rules that were followed when the resource was
   * constructed, and which must be understood when processing the content.
   * Often, this is a reference to an implementation guide that defines the
   * special rules along with other profiles etc.
   */
  implicitRules?: string;

  /**
   * The base language in which the resource is written.
   */
  language?: string;

  /**
   * A human-readable narrative that contains a summary of the resource and
   * can be used to represent the content of the resource to a human. The
   * narrative need not encode all the structured data, but is required to
   * contain sufficient detail to make it &quot;clinically safe&quot; for a human to
   * just read the narrative. Resource definitions may define what content
   * should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative;

  /**
   * These resources do not have an independent existence apart from the
   * resource that contains them - they cannot be identified independently,
   * and nor can they have their own independent transaction scope.
   */
  contained?: Resource[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the resource. To make the use of extensions
   * safe and manageable, there is a strict set of governance  applied to
   * the definition and use of extensions. Though any implementer can
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension.
   */
  extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the resource and that modifies the
   * understanding of the element that contains it and/or the understanding
   * of the containing element's descendants. Usually modifier elements
   * provide negation or qualification. To make the use of extensions safe
   * and manageable, there is a strict set of governance applied to the
   * definition and use of extensions. Though any implementer is allowed to
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension. Applications processing a
   * resource are required to check for modifier extensions.
   *
   * Modifier extensions SHALL NOT change the meaning of any elements on
   * Resource or DomainResource (including cannot change the meaning of
   * modifierExtension itself).
   */
  modifierExtension?: Extension[];

  /**
   * Business identifier for this product. Could be an MPID. When in
   * development or being regulated, products are typically referenced by
   * official identifiers, assigned by a manufacturer or regulator, and
   * unique to a product (which, when compared to a product instance being
   * prescribed, is actually a product type). See also
   * MedicinalProductDefinition.code.
   */
  identifier?: Identifier[];

  /**
   * Regulatory type, e.g. Investigational or Authorized.
   */
  type?: CodeableConcept;

  /**
   * If this medicine applies to human or veterinary uses.
   */
  domain?: CodeableConcept;

  /**
   * A business identifier relating to a specific version of the product,
   * this is commonly used to support revisions to an existing product.
   */
  version?: string;

  /**
   * The status within the lifecycle of this product record. A high-level
   * status, this is not intended to duplicate details carried elsewhere
   * such as legal status, or authorization status.
   */
  status?: CodeableConcept;

  /**
   * The date at which the given status became applicable.
   */
  statusDate?: string;

  /**
   * General description of this product.
   */
  description?: string;

  /**
   * The dose form for a single part product, or combined form of a
   * multiple part product. This is one concept that describes all the
   * components. It does not represent the form with components physically
   * mixed, if that might be necessary, for which see
   * (AdministrableProductDefinition.administrableDoseForm).
   */
  combinedPharmaceuticalDoseForm?: CodeableConcept;

  /**
   * The path by which the product is taken into or makes contact with the
   * body. In some regions this is referred to as the licenced or approved
   * route. See also AdministrableProductDefinition resource.
   * MedicinalProductDefinition.route is the same concept as
   * AdministrableProductDefinition.routeOfAdministration.code, and they
   * cannot be used together.
   */
  route?: CodeableConcept[];

  /**
   * Description of indication(s) for this product, used when structured
   * indications are not required. In cases where structured indications
   * are required, they are captured using the ClinicalUseDefinition
   * resource. An indication is a medical situation for which using the
   * product is appropriate.
   */
  indication?: string;

  /**
   * The legal status of supply of the medicinal product as classified by
   * the regulator.
   */
  legalStatusOfSupply?: CodeableConcept;

  /**
   * Whether the Medicinal Product is subject to additional monitoring for
   * regulatory reasons, such as heightened reporting requirements.
   */
  additionalMonitoringIndicator?: CodeableConcept;

  /**
   * Whether the Medicinal Product is subject to special measures for
   * regulatory reasons, such as a requirement to conduct
   * post-authorisation studies.
   */
  specialMeasures?: CodeableConcept[];

  /**
   * If authorised for use in children, or infants, neonates etc.
   */
  pediatricUseIndicator?: CodeableConcept;

  /**
   * Allows the product to be classified by various systems, commonly WHO
   * ATC.
   */
  classification?: CodeableConcept[];

  /**
   * Marketing status of the medicinal product, in contrast to marketing
   * authorization. This refers to the product being actually 'on the
   * market' as opposed to being allowed to be on the market (which is an
   * authorization).
   */
  marketingStatus?: MarketingStatus[];

  /**
   * Package type for the product. See also the PackagedProductDefinition
   * resource.
   */
  packagedMedicinalProduct?: CodeableConcept[];

  /**
   * The ingredients of this medicinal product - when not detailed in other
   * resources. This is only needed if the ingredients are not specified by
   * incoming references from the Ingredient resource, or indirectly via
   * incoming AdministrableProductDefinition, PackagedProductDefinition or
   * ManufacturedItemDefinition references. In cases where those levels of
   * detail are not used, the ingredients may be specified directly here as
   * codes.
   */
  ingredient?: CodeableConcept[];

  /**
   * Any component of the drug product which is not the chemical entity
   * defined as the drug substance, or an excipient in the drug product.
   * This includes process-related impurities and contaminants,
   * product-related impurities including degradation products.
   */
  impurity?: CodeableReference[];

  /**
   * Additional information or supporting documentation about the medicinal
   * product.
   */
  attachedDocument?: Reference<DocumentReference>[];

  /**
   * A master file for the medicinal product (e.g. Pharmacovigilance System
   * Master File). Drug master files (DMFs) are documents submitted to
   * regulatory agencies to provide confidential detailed information about
   * facilities, processes or articles used in the manufacturing,
   * processing, packaging and storing of drug products.
   */
  masterFile?: Reference<DocumentReference>[];

  /**
   * A product specific contact, person (in a role), or an organization.
   */
  contact?: MedicinalProductDefinitionContact[];

  /**
   * Clinical trials or studies that this product is involved in.
   */
  clinicalTrial?: Reference<ResearchStudy>[];

  /**
   * A code that this product is known by, usually within some formal
   * terminology, perhaps assigned by a third party (i.e. not the
   * manufacturer or regulator). Products (types of medications) tend to be
   * known by identifiers during development and within regulatory process.
   * However when they are prescribed they tend to be identified by codes.
   * The same product may be have multiple codes, applied to it by multiple
   * organizations.
   */
  code?: Coding[];

  /**
   * The product's name, including full name and possibly coded parts.
   */
  name?: MedicinalProductDefinitionName[];

  /**
   * Reference to another product, e.g. for linking authorised to
   * investigational product, or a virtual product.
   */
  crossReference?: MedicinalProductDefinitionCrossReference[];

  /**
   * A manufacturing or administrative process or step associated with (or
   * performed on) the medicinal product.
   */
  operation?: MedicinalProductDefinitionOperation[];

  /**
   * Allows the key product features to be recorded, such as &quot;sugar free&quot;,
   * &quot;modified release&quot;, &quot;parallel import&quot;.
   */
  characteristic?: MedicinalProductDefinitionCharacteristic[];
}

/**
 * Allows the key product features to be recorded, such as &quot;sugar free&quot;,
 * &quot;modified release&quot;, &quot;parallel import&quot;.
 */
export interface MedicinalProductDefinitionCharacteristic {

  /**
   * Unique id for the element within a resource (for internal references).
   * This may be any string value that does not contain spaces.
   */
  id?: string;

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element. To make the use of extensions
   * safe and manageable, there is a strict set of governance  applied to
   * the definition and use of extensions. Though any implementer can
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension.
   */
  extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element and that modifies the
   * understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually
   * modifier elements provide negation or qualification. To make the use
   * of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any
   * implementer can define an extension, there is a set of requirements
   * that SHALL be met as part of the definition of the extension.
   * Applications processing a resource are required to check for modifier
   * extensions.
   *
   * Modifier extensions SHALL NOT change the meaning of any elements on
   * Resource or DomainResource (including cannot change the meaning of
   * modifierExtension itself).
   */
  modifierExtension?: Extension[];

  /**
   * A code expressing the type of characteristic.
   */
  type?: CodeableConcept;

  /**
   * A value for the characteristic.
   */
  valueCodeableConcept?: CodeableConcept;

  /**
   * A value for the characteristic.
   */
  valueQuantity?: Quantity;

  /**
   * A value for the characteristic.
   */
  valueDate?: string;

  /**
   * A value for the characteristic.
   */
  valueBoolean?: boolean;

  /**
   * A value for the characteristic.
   */
  valueAttachment?: Attachment;
}

/**
 * A product specific contact, person (in a role), or an organization.
 */
export interface MedicinalProductDefinitionContact {

  /**
   * Unique id for the element within a resource (for internal references).
   * This may be any string value that does not contain spaces.
   */
  id?: string;

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element. To make the use of extensions
   * safe and manageable, there is a strict set of governance  applied to
   * the definition and use of extensions. Though any implementer can
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension.
   */
  extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element and that modifies the
   * understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually
   * modifier elements provide negation or qualification. To make the use
   * of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any
   * implementer can define an extension, there is a set of requirements
   * that SHALL be met as part of the definition of the extension.
   * Applications processing a resource are required to check for modifier
   * extensions.
   *
   * Modifier extensions SHALL NOT change the meaning of any elements on
   * Resource or DomainResource (including cannot change the meaning of
   * modifierExtension itself).
   */
  modifierExtension?: Extension[];

  /**
   * Allows the contact to be classified, for example QPPV,
   * Pharmacovigilance Enquiry Information.
   */
  type?: CodeableConcept;

  /**
   * A product specific contact, person (in a role), or an organization.
   */
  contact?: Reference<Organization | PractitionerRole>;
}

/**
 * Reference to another product, e.g. for linking authorised to
 * investigational product, or a virtual product.
 */
export interface MedicinalProductDefinitionCrossReference {

  /**
   * Unique id for the element within a resource (for internal references).
   * This may be any string value that does not contain spaces.
   */
  id?: string;

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element. To make the use of extensions
   * safe and manageable, there is a strict set of governance  applied to
   * the definition and use of extensions. Though any implementer can
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension.
   */
  extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element and that modifies the
   * understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually
   * modifier elements provide negation or qualification. To make the use
   * of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any
   * implementer can define an extension, there is a set of requirements
   * that SHALL be met as part of the definition of the extension.
   * Applications processing a resource are required to check for modifier
   * extensions.
   *
   * Modifier extensions SHALL NOT change the meaning of any elements on
   * Resource or DomainResource (including cannot change the meaning of
   * modifierExtension itself).
   */
  modifierExtension?: Extension[];

  /**
   * Reference to another product, e.g. for linking authorised to
   * investigational product.
   */
  product?: CodeableReference;

  /**
   * The type of relationship, for instance branded to generic, virtual to
   * actual product, product to development product (investigational),
   * parallel import version.
   */
  type?: CodeableConcept;
}

/**
 * The product's name, including full name and possibly coded parts.
 */
export interface MedicinalProductDefinitionName {

  /**
   * Unique id for the element within a resource (for internal references).
   * This may be any string value that does not contain spaces.
   */
  id?: string;

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element. To make the use of extensions
   * safe and manageable, there is a strict set of governance  applied to
   * the definition and use of extensions. Though any implementer can
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension.
   */
  extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element and that modifies the
   * understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually
   * modifier elements provide negation or qualification. To make the use
   * of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any
   * implementer can define an extension, there is a set of requirements
   * that SHALL be met as part of the definition of the extension.
   * Applications processing a resource are required to check for modifier
   * extensions.
   *
   * Modifier extensions SHALL NOT change the meaning of any elements on
   * Resource or DomainResource (including cannot change the meaning of
   * modifierExtension itself).
   */
  modifierExtension?: Extension[];

  /**
   * The full product name.
   */
  productName?: string;

  /**
   * Type of product name, such as rINN, BAN, Proprietary, Non-Proprietary.
   */
  type?: CodeableConcept;

  /**
   * Coding words or phrases of the name.
   */
  namePart?: MedicinalProductDefinitionNameNamePart[];

  /**
   * Country and jurisdiction where the name applies, and associated
   * language.
   */
  countryLanguage?: MedicinalProductDefinitionNameCountryLanguage[];
}

/**
 * Country and jurisdiction where the name applies, and associated
 * language.
 */
export interface MedicinalProductDefinitionNameCountryLanguage {

  /**
   * Unique id for the element within a resource (for internal references).
   * This may be any string value that does not contain spaces.
   */
  id?: string;

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element. To make the use of extensions
   * safe and manageable, there is a strict set of governance  applied to
   * the definition and use of extensions. Though any implementer can
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension.
   */
  extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element and that modifies the
   * understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually
   * modifier elements provide negation or qualification. To make the use
   * of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any
   * implementer can define an extension, there is a set of requirements
   * that SHALL be met as part of the definition of the extension.
   * Applications processing a resource are required to check for modifier
   * extensions.
   *
   * Modifier extensions SHALL NOT change the meaning of any elements on
   * Resource or DomainResource (including cannot change the meaning of
   * modifierExtension itself).
   */
  modifierExtension?: Extension[];

  /**
   * Country code for where this name applies.
   */
  country?: CodeableConcept;

  /**
   * Jurisdiction code for where this name applies. A jurisdiction may be a
   * sub- or supra-national entity (e.g. a state or a geographic region).
   */
  jurisdiction?: CodeableConcept;

  /**
   * Language code for this name.
   */
  language?: CodeableConcept;
}

/**
 * Coding words or phrases of the name.
 */
export interface MedicinalProductDefinitionNameNamePart {

  /**
   * Unique id for the element within a resource (for internal references).
   * This may be any string value that does not contain spaces.
   */
  id?: string;

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element. To make the use of extensions
   * safe and manageable, there is a strict set of governance  applied to
   * the definition and use of extensions. Though any implementer can
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension.
   */
  extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element and that modifies the
   * understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually
   * modifier elements provide negation or qualification. To make the use
   * of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any
   * implementer can define an extension, there is a set of requirements
   * that SHALL be met as part of the definition of the extension.
   * Applications processing a resource are required to check for modifier
   * extensions.
   *
   * Modifier extensions SHALL NOT change the meaning of any elements on
   * Resource or DomainResource (including cannot change the meaning of
   * modifierExtension itself).
   */
  modifierExtension?: Extension[];

  /**
   * A fragment of a product name.
   */
  part?: string;

  /**
   * Identifying type for this part of the name (e.g. strength part).
   */
  type?: CodeableConcept;
}

/**
 * A manufacturing or administrative process or step associated with (or
 * performed on) the medicinal product.
 */
export interface MedicinalProductDefinitionOperation {

  /**
   * Unique id for the element within a resource (for internal references).
   * This may be any string value that does not contain spaces.
   */
  id?: string;

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element. To make the use of extensions
   * safe and manageable, there is a strict set of governance  applied to
   * the definition and use of extensions. Though any implementer can
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension.
   */
  extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element and that modifies the
   * understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually
   * modifier elements provide negation or qualification. To make the use
   * of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any
   * implementer can define an extension, there is a set of requirements
   * that SHALL be met as part of the definition of the extension.
   * Applications processing a resource are required to check for modifier
   * extensions.
   *
   * Modifier extensions SHALL NOT change the meaning of any elements on
   * Resource or DomainResource (including cannot change the meaning of
   * modifierExtension itself).
   */
  modifierExtension?: Extension[];

  /**
   * The type of manufacturing operation e.g. manufacturing itself,
   * re-packaging. For the authorization of this, a RegulatedAuthorization
   * would point to the same plan or activity referenced here.
   */
  type?: CodeableReference;

  /**
   * Date range of applicability.
   */
  effectiveDate?: Period;

  /**
   * The organization or establishment responsible for (or associated with)
   * the particular process or step, examples include the manufacturer,
   * importer, agent.
   */
  organization?: Reference<Organization>[];

  /**
   * Specifies whether this particular business or manufacturing process is
   * considered proprietary or confidential.
   */
  confidentialityIndicator?: CodeableConcept;
}
