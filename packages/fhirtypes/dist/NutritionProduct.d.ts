/*
 * Generated by @medplum/generator
 * Do not edit manually.
 */

import { Annotation } from './Annotation';
import { Attachment } from './Attachment';
import { CodeableConcept } from './CodeableConcept';
import { CodeableReference } from './CodeableReference';
import { Extension } from './Extension';
import { Identifier } from './Identifier';
import { Meta } from './Meta';
import { Narrative } from './Narrative';
import { Organization } from './Organization';
import { Quantity } from './Quantity';
import { Ratio } from './Ratio';
import { Reference } from './Reference';
import { Resource } from './Resource';

/**
 * A food or fluid product that is consumed by patients.
 */
export interface NutritionProduct {

  /**
   * This is a NutritionProduct resource
   */
  readonly resourceType: 'NutritionProduct';

  /**
   * The logical id of the resource, as used in the URL for the resource.
   * Once assigned, this value never changes.
   */
  id?: string;

  /**
   * The metadata about the resource. This is content that is maintained by
   * the infrastructure. Changes to the content might not always be
   * associated with version changes to the resource.
   */
  meta?: Meta;

  /**
   * A reference to a set of rules that were followed when the resource was
   * constructed, and which must be understood when processing the content.
   * Often, this is a reference to an implementation guide that defines the
   * special rules along with other profiles etc.
   */
  implicitRules?: string;

  /**
   * The base language in which the resource is written.
   */
  language?: string;

  /**
   * A human-readable narrative that contains a summary of the resource and
   * can be used to represent the content of the resource to a human. The
   * narrative need not encode all the structured data, but is required to
   * contain sufficient detail to make it &quot;clinically safe&quot; for a human to
   * just read the narrative. Resource definitions may define what content
   * should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative;

  /**
   * These resources do not have an independent existence apart from the
   * resource that contains them - they cannot be identified independently,
   * and nor can they have their own independent transaction scope.
   */
  contained?: Resource[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the resource. To make the use of extensions
   * safe and manageable, there is a strict set of governance  applied to
   * the definition and use of extensions. Though any implementer can
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension.
   */
  extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the resource and that modifies the
   * understanding of the element that contains it and/or the understanding
   * of the containing element's descendants. Usually modifier elements
   * provide negation or qualification. To make the use of extensions safe
   * and manageable, there is a strict set of governance applied to the
   * definition and use of extensions. Though any implementer is allowed to
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension. Applications processing a
   * resource are required to check for modifier extensions.
   *
   * Modifier extensions SHALL NOT change the meaning of any elements on
   * Resource or DomainResource (including cannot change the meaning of
   * modifierExtension itself).
   */
  modifierExtension?: Extension[];

  /**
   * The current state of the product.
   */
  status?: 'active' | 'inactive' | 'entered-in-error';

  /**
   * Nutrition products can have different classifications - according to
   * its nutritional properties, preparation methods, etc.
   */
  category?: CodeableConcept[];

  /**
   * The code assigned to the product, for example a manufacturer number or
   * other terminology.
   */
  code?: CodeableConcept;

  /**
   * The organisation (manufacturer, representative or legal authorisation
   * holder) that is responsible for the device.
   */
  manufacturer?: Reference<Organization>[];

  /**
   * The product's nutritional information expressed by the nutrients.
   */
  nutrient?: NutritionProductNutrient[];

  /**
   * Ingredients contained in this product.
   */
  ingredient?: NutritionProductIngredient[];

  /**
   * Allergens that are known or suspected to be a part of this nutrition
   * product.
   */
  knownAllergen?: CodeableReference[];

  /**
   * Specifies descriptive properties of the nutrition product.
   */
  productCharacteristic?: NutritionProductProductCharacteristic[];

  /**
   * Conveys instance-level information about this product item. One or
   * several physical, countable instances or occurrences of the product.
   */
  instance?: NutritionProductInstance;

  /**
   * Comments made about the product.
   */
  note?: Annotation[];
}

/**
 * Ingredients contained in this product.
 */
export interface NutritionProductIngredient {

  /**
   * Unique id for the element within a resource (for internal references).
   * This may be any string value that does not contain spaces.
   */
  id?: string;

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element. To make the use of extensions
   * safe and manageable, there is a strict set of governance  applied to
   * the definition and use of extensions. Though any implementer can
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension.
   */
  extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element and that modifies the
   * understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually
   * modifier elements provide negation or qualification. To make the use
   * of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any
   * implementer can define an extension, there is a set of requirements
   * that SHALL be met as part of the definition of the extension.
   * Applications processing a resource are required to check for modifier
   * extensions.
   *
   * Modifier extensions SHALL NOT change the meaning of any elements on
   * Resource or DomainResource (including cannot change the meaning of
   * modifierExtension itself).
   */
  modifierExtension?: Extension[];

  /**
   * The ingredient contained in the product.
   */
  item?: CodeableReference;

  /**
   * The amount of ingredient that is in the product.
   */
  amount?: Ratio[];
}

/**
 * Conveys instance-level information about this product item. One or
 * several physical, countable instances or occurrences of the product.
 */
export interface NutritionProductInstance {

  /**
   * Unique id for the element within a resource (for internal references).
   * This may be any string value that does not contain spaces.
   */
  id?: string;

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element. To make the use of extensions
   * safe and manageable, there is a strict set of governance  applied to
   * the definition and use of extensions. Though any implementer can
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension.
   */
  extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element and that modifies the
   * understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually
   * modifier elements provide negation or qualification. To make the use
   * of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any
   * implementer can define an extension, there is a set of requirements
   * that SHALL be met as part of the definition of the extension.
   * Applications processing a resource are required to check for modifier
   * extensions.
   *
   * Modifier extensions SHALL NOT change the meaning of any elements on
   * Resource or DomainResource (including cannot change the meaning of
   * modifierExtension itself).
   */
  modifierExtension?: Extension[];

  /**
   * The amount of items or instances that the resource considers, for
   * instance when referring to 2 identical units together.
   */
  quantity?: Quantity;

  /**
   * The identifier for the physical instance, typically a serial number.
   */
  identifier?: Identifier[];

  /**
   * The identification of the batch or lot of the product.
   */
  lotNumber?: string;

  /**
   * The time after which the product is no longer expected to be in proper
   * condition, or its use is not advised or not allowed.
   */
  expiry?: string;

  /**
   * The time after which the product is no longer expected to be in proper
   * condition, or its use is not advised or not allowed.
   */
  useBy?: string;
}

/**
 * The product's nutritional information expressed by the nutrients.
 */
export interface NutritionProductNutrient {

  /**
   * Unique id for the element within a resource (for internal references).
   * This may be any string value that does not contain spaces.
   */
  id?: string;

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element. To make the use of extensions
   * safe and manageable, there is a strict set of governance  applied to
   * the definition and use of extensions. Though any implementer can
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension.
   */
  extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element and that modifies the
   * understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually
   * modifier elements provide negation or qualification. To make the use
   * of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any
   * implementer can define an extension, there is a set of requirements
   * that SHALL be met as part of the definition of the extension.
   * Applications processing a resource are required to check for modifier
   * extensions.
   *
   * Modifier extensions SHALL NOT change the meaning of any elements on
   * Resource or DomainResource (including cannot change the meaning of
   * modifierExtension itself).
   */
  modifierExtension?: Extension[];

  /**
   * The (relevant) nutrients in the product.
   */
  item?: CodeableReference;

  /**
   * The amount of nutrient expressed in one or more units: X per pack /
   * per serving / per dose.
   */
  amount?: Ratio[];
}

/**
 * Specifies descriptive properties of the nutrition product.
 */
export interface NutritionProductProductCharacteristic {

  /**
   * Unique id for the element within a resource (for internal references).
   * This may be any string value that does not contain spaces.
   */
  id?: string;

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element. To make the use of extensions
   * safe and manageable, there is a strict set of governance  applied to
   * the definition and use of extensions. Though any implementer can
   * define an extension, there is a set of requirements that SHALL be met
   * as part of the definition of the extension.
   */
  extension?: Extension[];

  /**
   * May be used to represent additional information that is not part of
   * the basic definition of the element and that modifies the
   * understanding of the element in which it is contained and/or the
   * understanding of the containing element's descendants. Usually
   * modifier elements provide negation or qualification. To make the use
   * of extensions safe and manageable, there is a strict set of governance
   * applied to the definition and use of extensions. Though any
   * implementer can define an extension, there is a set of requirements
   * that SHALL be met as part of the definition of the extension.
   * Applications processing a resource are required to check for modifier
   * extensions.
   *
   * Modifier extensions SHALL NOT change the meaning of any elements on
   * Resource or DomainResource (including cannot change the meaning of
   * modifierExtension itself).
   */
  modifierExtension?: Extension[];

  /**
   * A code specifying which characteristic of the product is being
   * described (for example, colour, shape).
   */
  type?: CodeableConcept;

  /**
   * The actual characteristic value corresponding to the type.
   */
  valueCodeableConcept?: CodeableConcept;

  /**
   * The actual characteristic value corresponding to the type.
   */
  valueString?: string;

  /**
   * The actual characteristic value corresponding to the type.
   */
  valueQuantity?: Quantity;

  /**
   * The actual characteristic value corresponding to the type.
   */
  valueBase64Binary?: string;

  /**
   * The actual characteristic value corresponding to the type.
   */
  valueAttachment?: Attachment;

  /**
   * The actual characteristic value corresponding to the type.
   */
  valueBoolean?: boolean;
}
